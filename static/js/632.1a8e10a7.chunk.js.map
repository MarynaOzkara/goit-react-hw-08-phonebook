{"version":3,"file":"static/js/632.1a8e10a7.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/flex.tsx","components/AuthNav.jsx","components/Navigation.jsx","components/UserMenu.jsx","components/AppBar.jsx","components/SharedLayout.jsx","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/layout/src/link.tsx","../node_modules/@chakra-ui/layout/src/box.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import { NavLink } from 'react-router-dom';\nimport { Flex, Link } from '@chakra-ui/react';\n\nconst AuthNav = () => {\n  return (\n    <Flex gap=\"20px\">\n      <Link\n        as={NavLink}\n        textDecoration=\"none\"\n        p=\"2px 10px\"\n        borderRadius={4}\n        _activeLink={{ bgColor: 'white', color: 'teal' }}\n        _hover={{\n          color: 'teal.900',\n        }}\n        to=\"/register\"\n      >\n        Register\n      </Link>\n      <Link\n        as={NavLink}\n        textDecoration=\"none\"\n        p=\"2px 10px\"\n        borderRadius={4}\n        _activeLink={{ bgColor: 'white', color: 'teal' }}\n        _hover={{\n          color: 'teal.900',\n        }}\n        to=\"/login\"\n      >\n        Login\n      </Link>\n    </Flex>\n  );\n};\nexport default AuthNav;\n","import { NavLink } from 'react-router-dom';\nimport { Flex, Link } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/authorization/selectors';\n\nconst Navigation = () => {\n  const isLogedIn = useSelector(selectIsLoggedIn);\n  return (\n    <>\n      <Flex gap=\"20px\">\n        <Link\n          as={NavLink}\n          textDecoration=\"none\"\n          p=\"2px 10px\"\n          borderRadius={4}\n          _activeLink={{ bgColor: 'white', color: 'teal' }}\n          _hover={{\n            color: 'teal.900',\n          }}\n          to=\"/\"\n        >\n          Home\n        </Link>\n        {isLogedIn && (\n          <Link\n            as={NavLink}\n            textDecoration=\"none\"\n            p=\"2px 10px\"\n            borderRadius={4}\n            _activeLink={{ bgColor: 'white', color: 'teal' }}\n            _hover={{\n              color: 'teal.900',\n            }}\n            to=\"/contacts\"\n          >\n            Contacts\n          </Link>\n        )}\n      </Flex>\n    </>\n  );\n};\nexport default Navigation;\n","import { Button, Flex, Text } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logOut } from 'redux/authorization/operations';\nimport { selectEmail } from 'redux/authorization/selectors';\n\nconst UserMenu = () => {\n  const userEmail = useSelector(selectEmail);\n  const dispatch = useDispatch();\n  return (\n    <Flex gap=\"20px\" alignItems=\"center\">\n      <Text>Welcome, {userEmail}</Text>\n      <Button size=\"xs\" onClick={() => dispatch(logOut())}>\n        Logout\n      </Button>\n    </Flex>\n  );\n};\nexport default UserMenu;\n","import AuthNav from 'components/AuthNav';\nimport Navigation from 'components/Navigation';\nimport { Flex } from '@chakra-ui/react';\nimport UserMenu from './UserMenu';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/authorization/selectors';\n\nconst AppBar = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  return (\n    <Flex\n      align=\"center\"\n      justify=\"space-between\"\n      bgColor=\"teal\"\n      color=\"white\"\n      p=\"10px 20px\"\n    >\n      <Navigation />\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\n    </Flex>\n  );\n};\nexport default AppBar;\n","import AppBar from 'components/AppBar';\nimport { Outlet } from 'react-router-dom';\nimport { Box } from '@chakra-ui/react';\n\nconst SharedLayout = () => {\n  return (\n    <Box maxW=\"1200px\" ml=\"auto\" mr=\"auto\">\n      <AppBar />\n      <Box w=\"500px\" ml=\"auto\" mr=\"auto\" p={[30, 15]}>\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\nexport default SharedLayout;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["props","forwardRef","direction","align","justify","wrap","basis","grow","shrink","rest","styles","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","div","__css","Flex","chakra","gap","as","NavLink","textDecoration","p","borderRadius","_activeLink","bgColor","color","_hover","to","isLogedIn","useSelector","selectIsLoggedIn","userEmail","selectEmail","dispatch","useDispatch","size","onClick","logOut","isLoggedIn","maxW","ml","mr","w","createContext","strict","name","useButtonGroup","children","className","_children","focusable","isValidElement","cloneElement","_className","span","cx","ButtonIcon","alignSelf","displayName","label","placement","spacing","ButtonSpinner","Spinner","width","height","marginProp","spinnerStyles","useMemo","position","dataAttr","isDisabled","isLoading","isActive","Fragment","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","buttonStyles","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","useButtonType","_ref","defaultType","contentProps","value","useState","isButton","setIsButton","ref","useCallback","node","tagName","useMergeRefs","button","disabled","useStyleConfig","Button","jsx","group","omitThemingProps","opacity","marginStart","marginEnd","textAlign","decoration","casing","aliasedProps","object","clone","Object","assign","key","compact","textTransform","Text","isExternal","a","target","Link","Square","centerContent","boxSize","Box","Circle","assignRef","current","error","Error","mergeRefs","refs","forEach"],"sourceRoot":""}